apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext.artifact = 'androiddatetimeformatters-threetenbp'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        versionName rootProject.ext.libraryVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    signingConfigs {
        release {
            storeFile file(keystore)
            storePassword keystorePassword
            keyAlias keyAlias
            keyPassword keyPassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

apply from: 'publish.gradle'

dependencies {
    api 'org.threeten:threetenbp:1.4.0:no-tzdb'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation project(':test')
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

configurations {
    baseline
    latest
}

dependencies {
    baseline("drewhamilton.androiddatetimeformatters:$artifact:$compatibleVersion") {
        transitive = false
        force = true
    }
    latest project(path: ":$project.name", configuration: 'releaseRuntimeElements')
}

//noinspection UnnecessaryQualifiedReference
task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath = configurations.baseline.incoming.artifactView { config ->
        config.attributes { container ->
            container.attribute(Attribute.of("artifactType", String.class), "jar")
        }
    }.artifacts.artifactFiles

    newClasspath = configurations.latest.incoming.artifactView { config ->
        config.attributes { container ->
            container.attribute(Attribute.of("artifactType", String.class), "jar")
        }
    }.artifacts.artifactFiles

    onlyModified = true
    failOnModification = true
    txtOutputFile = file("$buildDir/reports/japi.txt")
}
